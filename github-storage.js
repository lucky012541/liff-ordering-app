/**
 * GitHub Issues API Storage System
 * ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡πà‡∏≤‡∏ô GitHub Issues API
 * 
 * Features:
 * - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô GitHub Issues
 * - ‡πÉ‡∏ä‡πâ Labels ‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
 * - ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Private Repository
 * - ‡∏°‡∏µ Search ‡πÅ‡∏•‡∏∞ Filter
 */

class GitHubStorage {
    constructor(config = {}) {
        this.token = config.token || localStorage.getItem('github_token') || '';
        this.owner = config.owner || localStorage.getItem('github_owner') || '';
        this.repo = config.repo || localStorage.getItem('github_repo') || '';
        this.apiUrl = 'https://api.github.com';
        
        // Labels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        this.labels = {
            pending: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
            confirmed: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
            processing: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°',
            shipped: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß',
            delivered: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
            cancelled: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            cash: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
            transfer: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
            promptpay: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: PromptPay'
        };
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GitHub credentials
    setCredentials(token, owner, repo) {
        this.token = token;
        this.owner = owner;
        this.repo = repo;
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
        localStorage.setItem('github_token', token);
        localStorage.setItem('github_owner', owner);
        localStorage.setItem('github_repo', repo);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    isConfigured() {
        return !!(this.token && this.owner && this.repo);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API request
    getHeaders() {
        return {
            'Authorization': `token ${this.token}`,
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
        };
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ GitHub
    async testConnection() {
        try {
            const response = await fetch(`${this.apiUrl}/repos/${this.owner}/${this.repo}`, {
                headers: this.getHeaders()
            });
            
            if (response.ok) {
                const repo = await response.json();
                return {
                    success: true,
                    message: `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡∏±‡∏ö ${repo.full_name}`,
                    repo: repo
                };
            } else {
                return {
                    success: false,
                    message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: ${response.status} ${response.statusText}`
                };
            }
        } catch (error) {
            return {
                success: false,
                message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
            };
        }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Labels ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    async setupLabels() {
        const results = [];
        
        for (const [key, name] of Object.entries(this.labels)) {
            try {
                const color = this.getLabelColor(key);
                const response = await fetch(`${this.apiUrl}/repos/${this.owner}/${this.repo}/labels`, {
                    method: 'POST',
                    headers: this.getHeaders(),
                    body: JSON.stringify({
                        name: name,
                        color: color,
                        description: `Label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${name}`
                    })
                });
                
                if (response.status === 201) {
                    results.push(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á label: ${name}`);
                } else if (response.status === 422) {
                    results.push(`‚ÑπÔ∏è Label ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${name}`);
                } else {
                    results.push(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á label: ${name}`);
                }
            } catch (error) {
                results.push(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
            }
        }
        
        return results;
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ Label
    getLabelColor(key) {
        const colors = {
            pending: 'fbca04',      // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            confirmed: '0e8a16',    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            processing: '1d76db',   // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
            shipped: '5319e7',      // ‡∏°‡πà‡∏ß‡∏á
            delivered: '28a745',    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°
            cancelled: 'd73a49',    // ‡πÅ‡∏î‡∏á
            cash: 'f9d71c',         // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ó‡∏≠‡∏á
            transfer: '0366d6',     // ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°
            promptpay: 'e99695'     // ‡∏ä‡∏°‡∏û‡∏π
        };
        return colors[key] || '7057ff';
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô GitHub Issue
    async saveOrder(order) {
        try {
            const title = `‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${order.id} - ${order.customer.customerName}`;
            const body = this.formatOrderBody(order);
            const labels = this.getOrderLabels(order);

            const response = await fetch(`${this.apiUrl}/repos/${this.owner}/${this.repo}/issues`, {
                method: 'POST',
                headers: this.getHeaders(),
                body: JSON.stringify({
                    title: title,
                    body: body,
                    labels: labels
                })
            });

            if (response.ok) {
                const issue = await response.json();
                console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', issue.number);
                return {
                    success: true,
                    issueNumber: issue.number,
                    url: issue.html_url
                };
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Issue
    formatOrderBody(order) {
        const items = order.items.map(item => 
            `- ${item.name} x${item.quantity} = ‡∏ø${item.price * item.quantity}`
        ).join('\n');

        return `## üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠

**üÜî ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:** ${order.id}
**üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:** ${order.date}
**üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:** ‡∏ø${order.total}

## üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
- **‡∏ä‡∏∑‡πà‡∏≠:** ${order.customer.customerName}
- **‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:** ${order.customer.customerPhone}
- **‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:** ${order.customer.deliveryAddress}
${order.customer.deliveryNote ? `- **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ${order.customer.deliveryNote}` : ''}

## üõí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
${items}

## üí≥ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
- **‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞:** ${this.getPaymentMethodText(order.paymentMethod)}
${order.paymentMeta ? this.formatPaymentMeta(order.paymentMeta) : ''}

---
*‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå*`;
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    getPaymentMethodText(method) {
        const methods = {
            cash: '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á',
            transfer: '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
            promptpay: 'PromptPay'
        };
        return methods[method] || method;
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    formatPaymentMeta(meta) {
        let result = '';
        if (meta.transferRef) {
            result += `- **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:** ${meta.transferRef}\n`;
        }
        if (meta.slipDataUrl) {
            result += `- **‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:** [‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ](${meta.slipDataUrl})\n`;
        }
        return result;
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Labels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    getOrderLabels(order) {
        const labels = [];
        
        // Label ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if (order.status && this.labels[order.status]) {
            labels.push(this.labels[order.status]);
        } else {
            labels.push(this.labels.pending);
        }
        
        // Label ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        if (order.paymentMethod && this.labels[order.paymentMethod]) {
            labels.push(this.labels[order.paymentMethod]);
        }
        
        return labels;
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    async getOrders(options = {}) {
        try {
            const params = new URLSearchParams({
                state: options.state || 'all',
                sort: options.sort || 'created',
                direction: options.direction || 'desc',
                per_page: options.perPage || 100
            });

            if (options.labels) {
                params.append('labels', options.labels);
            }

            const response = await fetch(
                `${this.apiUrl}/repos/${this.owner}/${this.repo}/issues?${params}`,
                { headers: this.getHeaders() }
            );

            if (response.ok) {
                const issues = await response.json();
                return issues.map(issue => this.parseOrderFromIssue(issue));
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ:', error);
            return [];
        }
    }

    // ‡πÅ‡∏õ‡∏•‡∏á GitHub Issue ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    parseOrderFromIssue(issue) {
        // Extract order ID from title
        const orderIdMatch = issue.title.match(/‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #(\d+)/);
        const orderId = orderIdMatch ? orderIdMatch[1] : issue.number;

        // Parse status from labels
        const statusLabel = issue.labels.find(label => 
            label.name.startsWith('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:')
        );
        const status = statusLabel ? 
            Object.keys(this.labels).find(key => this.labels[key] === statusLabel.name) : 
            'pending';

        return {
            id: orderId,
            issueNumber: issue.number,
            title: issue.title,
            status: status,
            createdAt: issue.created_at,
            updatedAt: issue.updated_at,
            url: issue.html_url,
            labels: issue.labels.map(label => label.name),
            body: issue.body
        };
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    async updateOrderStatus(issueNumber, newStatus) {
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Issue ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const response = await fetch(
                `${this.apiUrl}/repos/${this.owner}/${this.repo}/issues/${issueNumber}`,
                { headers: this.getHeaders() }
            );

            if (!response.ok) {
                throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${response.statusText}`);
            }

            const issue = await response.json();
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Labels
            const newLabels = issue.labels
                .filter(label => !label.name.startsWith('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:'))
                .map(label => label.name);
            
            if (this.labels[newStatus]) {
                newLabels.push(this.labels[newStatus]);
            }

            // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ PATCH
            const updateResponse = await fetch(
                `${this.apiUrl}/repos/${this.owner}/${this.repo}/issues/${issueNumber}`,
                {
                    method: 'PATCH',
                    headers: this.getHeaders(),
                    body: JSON.stringify({
                        labels: newLabels
                    })
                }
            );

            if (updateResponse.ok) {
                return { success: true };
            } else {
                throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ: ${updateResponse.statusText}`);
            }
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ:', error);
            return { success: false, error: error.message };
        }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    async addComment(issueNumber, comment) {
        try {
            const response = await fetch(
                `${this.apiUrl}/repos/${this.owner}/${this.repo}/issues/${issueNumber}/comments`,
                {
                    method: 'POST',
                    headers: this.getHeaders(),
                    body: JSON.stringify({
                        body: comment
                    })
                }
            );

            if (response.ok) {
                return { success: true };
            } else {
                throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ: ${response.statusText}`);
            }
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ:', error);
            return { success: false, error: error.message };
        }
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    async searchOrders(query) {
        try {
            const response = await fetch(
                `${this.apiUrl}/search/issues?q=${encodeURIComponent(query)}+repo:${this.owner}/${this.repo}`,
                { headers: this.getHeaders() }
            );

            if (response.ok) {
                const result = await response.json();
                return result.items.map(issue => this.parseOrderFromIssue(issue));
            } else {
                throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ: ${response.statusText}`);
            }
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ:', error);
            return [];
        }
    }

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    async getOrderStats() {
        try {
            const orders = await this.getOrders();
            const stats = {
                total: orders.length,
                pending: 0,
                confirmed: 0,
                processing: 0,
                shipped: 0,
                delivered: 0,
                cancelled: 0
            };

            orders.forEach(order => {
                if (stats.hasOwnProperty(order.status)) {
                    stats[order.status]++;
                }
            });

            return stats;
        } catch (error) {
            console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ:', error);
            return null;
        }
    }
}

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
window.GitHubStorage = GitHubStorage;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance global
window.githubStorage = new GitHubStorage();

console.log('‚úÖ GitHub Storage System ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
